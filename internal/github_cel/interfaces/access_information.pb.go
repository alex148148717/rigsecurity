// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: access_information.proto

package interfaces

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitType int32

const (
	GitType_Github GitType = 0
)

// Enum value maps for GitType.
var (
	GitType_name = map[int32]string{
		0: "Github",
	}
	GitType_value = map[string]int32{
		"Github": 0,
	}
)

func (x GitType) Enum() *GitType {
	p := new(GitType)
	*p = x
	return p
}

func (x GitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitType) Descriptor() protoreflect.EnumDescriptor {
	return file_access_information_proto_enumTypes[0].Descriptor()
}

func (GitType) Type() protoreflect.EnumType {
	return &file_access_information_proto_enumTypes[0]
}

func (x GitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitType.Descriptor instead.
func (GitType) EnumDescriptor() ([]byte, []int) {
	return file_access_information_proto_rawDescGZIP(), []int{0}
}

type AccessControlType int32

const (
	AccessControlType_CEL AccessControlType = 0
)

// Enum value maps for AccessControlType.
var (
	AccessControlType_name = map[int32]string{
		0: "CEL",
	}
	AccessControlType_value = map[string]int32{
		"CEL": 0,
	}
)

func (x AccessControlType) Enum() *AccessControlType {
	p := new(AccessControlType)
	*p = x
	return p
}

func (x AccessControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_access_information_proto_enumTypes[1].Descriptor()
}

func (AccessControlType) Type() protoreflect.EnumType {
	return &file_access_information_proto_enumTypes[1]
}

func (x AccessControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessControlType.Descriptor instead.
func (AccessControlType) EnumDescriptor() ([]byte, []int) {
	return file_access_information_proto_rawDescGZIP(), []int{1}
}

type UserType int32

const (
	UserType_Guest UserType = 0
	UserType_User  UserType = 1
	UserType_Admin UserType = 2
)

// Enum value maps for UserType.
var (
	UserType_name = map[int32]string{
		0: "Guest",
		1: "User",
		2: "Admin",
	}
	UserType_value = map[string]int32{
		"Guest": 0,
		"User":  1,
		"Admin": 2,
	}
)

func (x UserType) Enum() *UserType {
	p := new(UserType)
	*p = x
	return p
}

func (x UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_access_information_proto_enumTypes[2].Descriptor()
}

func (UserType) Type() protoreflect.EnumType {
	return &file_access_information_proto_enumTypes[2]
}

func (x UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserType.Descriptor instead.
func (UserType) EnumDescriptor() ([]byte, []int) {
	return file_access_information_proto_rawDescGZIP(), []int{2}
}

type Permissions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         bool                   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Permissions) Reset() {
	*x = Permissions{}
	mi := &file_access_information_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permissions) ProtoMessage() {}

func (x *Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_access_information_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permissions.ProtoReflect.Descriptor instead.
func (*Permissions) Descriptor() ([]byte, []int) {
	return file_access_information_proto_rawDescGZIP(), []int{0}
}

func (x *Permissions) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Permissions) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type UserID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserID) Reset() {
	*x = UserID{}
	mi := &file_access_information_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserID) ProtoMessage() {}

func (x *UserID) ProtoReflect() protoreflect.Message {
	mi := &file_access_information_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserID.ProtoReflect.Descriptor instead.
func (*UserID) Descriptor() ([]byte, []int) {
	return file_access_information_proto_rawDescGZIP(), []int{1}
}

func (x *UserID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RepositoryUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *UserID                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserName      string                 `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Email         string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Type          UserType               `protobuf:"varint,4,opt,name=type,proto3,enum=git_access_information.UserType" json:"type,omitempty"`
	Permissions   []*Permissions         `protobuf:"bytes,5,rep,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepositoryUser) Reset() {
	*x = RepositoryUser{}
	mi := &file_access_information_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryUser) ProtoMessage() {}

func (x *RepositoryUser) ProtoReflect() protoreflect.Message {
	mi := &file_access_information_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryUser.ProtoReflect.Descriptor instead.
func (*RepositoryUser) Descriptor() ([]byte, []int) {
	return file_access_information_proto_rawDescGZIP(), []int{2}
}

func (x *RepositoryUser) GetId() *UserID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RepositoryUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RepositoryUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RepositoryUser) GetType() UserType {
	if x != nil {
		return x.Type
	}
	return UserType_Guest
}

func (x *RepositoryUser) GetPermissions() []*Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type UserInformation struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Ok             bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error          string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	RepositoryUser *RepositoryUser        `protobuf:"bytes,4,opt,name=repositoryUser,proto3" json:"repositoryUser,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserInformation) Reset() {
	*x = UserInformation{}
	mi := &file_access_information_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInformation) ProtoMessage() {}

func (x *UserInformation) ProtoReflect() protoreflect.Message {
	mi := &file_access_information_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInformation.ProtoReflect.Descriptor instead.
func (*UserInformation) Descriptor() ([]byte, []int) {
	return file_access_information_proto_rawDescGZIP(), []int{3}
}

func (x *UserInformation) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *UserInformation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserInformation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *UserInformation) GetRepositoryUser() *RepositoryUser {
	if x != nil {
		return x.RepositoryUser
	}
	return nil
}

type RepositoryAccessInformation struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RepositoryUrl   string                 `protobuf:"bytes,1,opt,name=repositoryUrl,proto3" json:"repositoryUrl,omitempty"`
	Error           string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	UserInformation []*UserInformation     `protobuf:"bytes,3,rep,name=userInformation,proto3" json:"userInformation,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RepositoryAccessInformation) Reset() {
	*x = RepositoryAccessInformation{}
	mi := &file_access_information_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepositoryAccessInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryAccessInformation) ProtoMessage() {}

func (x *RepositoryAccessInformation) ProtoReflect() protoreflect.Message {
	mi := &file_access_information_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryAccessInformation.ProtoReflect.Descriptor instead.
func (*RepositoryAccessInformation) Descriptor() ([]byte, []int) {
	return file_access_information_proto_rawDescGZIP(), []int{4}
}

func (x *RepositoryAccessInformation) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *RepositoryAccessInformation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RepositoryAccessInformation) GetUserInformation() []*UserInformation {
	if x != nil {
		return x.UserInformation
	}
	return nil
}

type AccessInformationResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Repositories  []*RepositoryAccessInformation `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	Organizations string                         `protobuf:"bytes,2,opt,name=organizations,proto3" json:"organizations,omitempty"`
	ScanText      string                         `protobuf:"bytes,3,opt,name=scanText,proto3" json:"scanText,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessInformationResponse) Reset() {
	*x = AccessInformationResponse{}
	mi := &file_access_information_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessInformationResponse) ProtoMessage() {}

func (x *AccessInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_information_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessInformationResponse.ProtoReflect.Descriptor instead.
func (*AccessInformationResponse) Descriptor() ([]byte, []int) {
	return file_access_information_proto_rawDescGZIP(), []int{5}
}

func (x *AccessInformationResponse) GetRepositories() []*RepositoryAccessInformation {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *AccessInformationResponse) GetOrganizations() string {
	if x != nil {
		return x.Organizations
	}
	return ""
}

func (x *AccessInformationResponse) GetScanText() string {
	if x != nil {
		return x.ScanText
	}
	return ""
}

type AccessInformationRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	GitType           GitType                `protobuf:"varint,1,opt,name=gitType,proto3,enum=git_access_information.GitType" json:"gitType,omitempty"`
	AccessControlType AccessControlType      `protobuf:"varint,2,opt,name=accessControlType,proto3,enum=git_access_information.AccessControlType" json:"accessControlType,omitempty"`
	RepositoriesUrl   []string               `protobuf:"bytes,3,rep,name=repositoriesUrl,proto3" json:"repositoriesUrl,omitempty"`
	Organizations     string                 `protobuf:"bytes,4,opt,name=organizations,proto3" json:"organizations,omitempty"`
	ScanText          string                 `protobuf:"bytes,5,opt,name=scanText,proto3" json:"scanText,omitempty"`
	GitToken          string                 `protobuf:"bytes,6,opt,name=gitToken,proto3" json:"gitToken,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AccessInformationRequest) Reset() {
	*x = AccessInformationRequest{}
	mi := &file_access_information_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessInformationRequest) ProtoMessage() {}

func (x *AccessInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_information_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessInformationRequest.ProtoReflect.Descriptor instead.
func (*AccessInformationRequest) Descriptor() ([]byte, []int) {
	return file_access_information_proto_rawDescGZIP(), []int{6}
}

func (x *AccessInformationRequest) GetGitType() GitType {
	if x != nil {
		return x.GitType
	}
	return GitType_Github
}

func (x *AccessInformationRequest) GetAccessControlType() AccessControlType {
	if x != nil {
		return x.AccessControlType
	}
	return AccessControlType_CEL
}

func (x *AccessInformationRequest) GetRepositoriesUrl() []string {
	if x != nil {
		return x.RepositoriesUrl
	}
	return nil
}

func (x *AccessInformationRequest) GetOrganizations() string {
	if x != nil {
		return x.Organizations
	}
	return ""
}

func (x *AccessInformationRequest) GetScanText() string {
	if x != nil {
		return x.ScanText
	}
	return ""
}

func (x *AccessInformationRequest) GetGitToken() string {
	if x != nil {
		return x.GitToken
	}
	return ""
}

var File_access_information_proto protoreflect.FileDescriptor

const file_access_information_proto_rawDesc = "" +
	"\n" +
	"\x18access_information.proto\x12\x16git_access_information\"5\n" +
	"\vPermissions\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value\"\x1e\n" +
	"\x06UserID\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"\xef\x01\n" +
	"\x0eRepositoryUser\x12.\n" +
	"\x02id\x18\x01 \x01(\v2\x1e.git_access_information.UserIDR\x02id\x12\x1a\n" +
	"\buserName\x18\x02 \x01(\tR\buserName\x12\x14\n" +
	"\x05email\x18\x03 \x01(\tR\x05email\x124\n" +
	"\x04type\x18\x04 \x01(\x0e2 .git_access_information.UserTypeR\x04type\x12E\n" +
	"\vpermissions\x18\x05 \x03(\v2#.git_access_information.PermissionsR\vpermissions\"\xa1\x01\n" +
	"\x0fUserInformation\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x12N\n" +
	"\x0erepositoryUser\x18\x04 \x01(\v2&.git_access_information.RepositoryUserR\x0erepositoryUser\"\xac\x01\n" +
	"\x1bRepositoryAccessInformation\x12$\n" +
	"\rrepositoryUrl\x18\x01 \x01(\tR\rrepositoryUrl\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12Q\n" +
	"\x0fuserInformation\x18\x03 \x03(\v2'.git_access_information.UserInformationR\x0fuserInformation\"\xb6\x01\n" +
	"\x19AccessInformationResponse\x12W\n" +
	"\frepositories\x18\x01 \x03(\v23.git_access_information.RepositoryAccessInformationR\frepositories\x12$\n" +
	"\rorganizations\x18\x02 \x01(\tR\rorganizations\x12\x1a\n" +
	"\bscanText\x18\x03 \x01(\tR\bscanText\"\xb6\x02\n" +
	"\x18AccessInformationRequest\x129\n" +
	"\agitType\x18\x01 \x01(\x0e2\x1f.git_access_information.GitTypeR\agitType\x12W\n" +
	"\x11accessControlType\x18\x02 \x01(\x0e2).git_access_information.AccessControlTypeR\x11accessControlType\x12(\n" +
	"\x0frepositoriesUrl\x18\x03 \x03(\tR\x0frepositoriesUrl\x12$\n" +
	"\rorganizations\x18\x04 \x01(\tR\rorganizations\x12\x1a\n" +
	"\bscanText\x18\x05 \x01(\tR\bscanText\x12\x1a\n" +
	"\bgitToken\x18\x06 \x01(\tR\bgitToken*\x15\n" +
	"\aGitType\x12\n" +
	"\n" +
	"\x06Github\x10\x00*\x1c\n" +
	"\x11AccessControlType\x12\a\n" +
	"\x03CEL\x10\x00**\n" +
	"\bUserType\x12\t\n" +
	"\x05Guest\x10\x00\x12\b\n" +
	"\x04User\x10\x01\x12\t\n" +
	"\x05Admin\x10\x022\x95\x01\n" +
	"\x16GitAccessInformationV1\x12{\n" +
	"\x14GetAccessInformation\x120.git_access_information.AccessInformationRequest\x1a1.git_access_information.AccessInformationResponseB Z\x1einternal/github_cel/interfacesb\x06proto3"

var (
	file_access_information_proto_rawDescOnce sync.Once
	file_access_information_proto_rawDescData []byte
)

func file_access_information_proto_rawDescGZIP() []byte {
	file_access_information_proto_rawDescOnce.Do(func() {
		file_access_information_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_access_information_proto_rawDesc), len(file_access_information_proto_rawDesc)))
	})
	return file_access_information_proto_rawDescData
}

var file_access_information_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_access_information_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_access_information_proto_goTypes = []any{
	(GitType)(0),                        // 0: git_access_information.GitType
	(AccessControlType)(0),              // 1: git_access_information.AccessControlType
	(UserType)(0),                       // 2: git_access_information.UserType
	(*Permissions)(nil),                 // 3: git_access_information.Permissions
	(*UserID)(nil),                      // 4: git_access_information.UserID
	(*RepositoryUser)(nil),              // 5: git_access_information.RepositoryUser
	(*UserInformation)(nil),             // 6: git_access_information.UserInformation
	(*RepositoryAccessInformation)(nil), // 7: git_access_information.RepositoryAccessInformation
	(*AccessInformationResponse)(nil),   // 8: git_access_information.AccessInformationResponse
	(*AccessInformationRequest)(nil),    // 9: git_access_information.AccessInformationRequest
}
var file_access_information_proto_depIdxs = []int32{
	4, // 0: git_access_information.RepositoryUser.id:type_name -> git_access_information.UserID
	2, // 1: git_access_information.RepositoryUser.type:type_name -> git_access_information.UserType
	3, // 2: git_access_information.RepositoryUser.permissions:type_name -> git_access_information.Permissions
	5, // 3: git_access_information.UserInformation.repositoryUser:type_name -> git_access_information.RepositoryUser
	6, // 4: git_access_information.RepositoryAccessInformation.userInformation:type_name -> git_access_information.UserInformation
	7, // 5: git_access_information.AccessInformationResponse.repositories:type_name -> git_access_information.RepositoryAccessInformation
	0, // 6: git_access_information.AccessInformationRequest.gitType:type_name -> git_access_information.GitType
	1, // 7: git_access_information.AccessInformationRequest.accessControlType:type_name -> git_access_information.AccessControlType
	9, // 8: git_access_information.GitAccessInformationV1.GetAccessInformation:input_type -> git_access_information.AccessInformationRequest
	8, // 9: git_access_information.GitAccessInformationV1.GetAccessInformation:output_type -> git_access_information.AccessInformationResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_access_information_proto_init() }
func file_access_information_proto_init() {
	if File_access_information_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_access_information_proto_rawDesc), len(file_access_information_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_access_information_proto_goTypes,
		DependencyIndexes: file_access_information_proto_depIdxs,
		EnumInfos:         file_access_information_proto_enumTypes,
		MessageInfos:      file_access_information_proto_msgTypes,
	}.Build()
	File_access_information_proto = out.File
	file_access_information_proto_goTypes = nil
	file_access_information_proto_depIdxs = nil
}
